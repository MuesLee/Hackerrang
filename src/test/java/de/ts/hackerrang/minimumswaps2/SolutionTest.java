package de.ts.hackerrang.minimumswaps2;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.Comparator;
import java.util.stream.IntStream;
import java.util.stream.Stream;

class SolutionTest {

    private static Stream<Arguments> puzzleArguments() {

        return Stream.of(
                Arguments.of(new int[]{4, 3, 1, 2}, 3),
                Arguments.of(new int[]{2, 3, 4, 1, 5}, 3),
                Arguments.of(new int[]{1, 3, 5, 2, 4, 6, 7}, 3),
                Arguments.of(new int[]{7, 1, 3, 2, 4, 5, 6}, 5),
                Arguments.of(new int[]{}, 991),
                Arguments.of(IntStream.rangeClosed(1, 10).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray(), 5),
                Arguments.of(IntStream.rangeClosed(1, 1000).toArray(), 0),
                Arguments.of(IntStream.rangeClosed(1, 1000).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray(), 500),
                Arguments.of(IntStream.rangeClosed(1, 10000).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray(), 5000),
                Arguments.of(IntStream.rangeClosed(1, 100000).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray(), 50000),
                Arguments.of(IntStream.rangeClosed(1, 1000000).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray(), 500000),
                Arguments.of(IntStream.rangeClosed(1, 10000000).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray(), 5000000)
        );
    }

    @ParameterizedTest(name = "{index} - Expected minimal swap count: {1}")
    @MethodSource("puzzleArguments")
    @Timeout(value = 1)
    void minimumSwaps(int[] givenArray, int expectedMinimumSwapCount) {

        int actualMinimumSwapCount = Solution.minimumSwaps(givenArray);

        Assertions.assertThat(actualMinimumSwapCount).isEqualTo(expectedMinimumSwapCount);
    }
}
